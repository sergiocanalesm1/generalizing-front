/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
const videoGameModelUrl = "/videogame.glb";

export default function Videogame(props) {
  const { nodes, materials } = useGLTF(videoGameModelUrl);
  const mesh = useRef();
  const [hovered, setHovered] = useState(false);

  useFrame((state, delta) => {
    if (hovered) {
      mesh.current.rotation.y += delta;
    } else if (mesh.current.rotation.y > 0.01) {
      mesh.current.rotation.y -= delta;
    }
  });

  return (
    <group
      {...props}
      ref={mesh}
      dispose={null}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
    >
      <group rotation={[Math.PI, 1.57, 0]} scale={[0.66, 0.06, 0.66]}>
        <mesh geometry={nodes.Cylinder.geometry} material={materials.main} />
        <mesh
          geometry={nodes.Cylinder_1.geometry}
          material={materials["xy but"]}
        />
        <mesh
          geometry={nodes.Cylinder_2.geometry}
          material={materials["ab but"]}
        />
        <mesh
          geometry={nodes.Cylinder_3.geometry}
          material={materials["black buttons"]}
        />
        <mesh geometry={nodes.Cylinder_4.geometry} material={materials.z} />
        <mesh
          geometry={nodes.Cylinder_5.geometry}
          material={materials["cyl right inside"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(videoGameModelUrl);
